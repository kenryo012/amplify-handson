AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  env:
    Type: String
  apiamplifyhandsonksatou2GraphQLAPIIdOutput:
    Type: String
  apiamplifyhandsonksatou2GraphQLAPIEndpointOutput:
    Type: String
Resources:
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  ApplyPipeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ksatou2ApplyPipeRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
  ApplyPipePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ksatou2ApplyPipePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
            Resource:
              Fn::ImportValue:
                Fn::Sub: >-
                  ${apiamplifyhandsonksatou2GraphQLAPIIdOutput}:GetAtt:ApplicationTable:StreamArn
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              Fn::GetAtt:
                - IntegrationStateMachine
                - Arn
      Roles:
        - Ref: ApplyPipeRole
  IntegrationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: |-
        {
          "StartAt": "Change Status And Add Token",
          "States": {
            "Change Status And Add Token": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:updateItem.waitForTaskToken",
              "Parameters": {
                "TableName.$": "States.ArrayGetItem(States.StringSplit($.[0].eventSourceARN, '/'), 1)",
                "Key": {
                  "id": {
                    "S.$": "$.[0].dynamodb.Keys.id.S"
                  }
                },
                "UpdateExpression": "SET #st = :newStatus, taskToken = :taskToken",
                "ExpressionAttributeNames": {
                  "#st": "status"
                },
                "ExpressionAttributeValues": {
                  ":newStatus": {
                    "S": "CHECKING"
                  },
                  ":taskToken": {
                    "S.$": "$$.Task.Token"
                  }
                }
              },
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "Change Status To REJECTED",
                  "ResultPath": null
                }
              ],
              "Next": "Change Status To ACCEPTED",
              "ResultPath": null
            },
            "Change Status To ACCEPTED": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName.$": "States.ArrayGetItem(States.StringSplit($.[0].eventSourceARN, '/'), 1)",
                "Key": {
                  "id": {
                    "S.$": "$.[0].dynamodb.Keys.id.S"
                  }
                },
                "UpdateExpression": "SET #st = :newStatus",
                "ExpressionAttributeNames": {
                  "#st": "status"
                },
                "ExpressionAttributeValues": {
                  ":newStatus": {
                    "S": "ACCEPTED"
                  }
                }
              },
              "End": true
            },
            "Change Status To REJECTED": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName.$": "States.ArrayGetItem(States.StringSplit($.[0].eventSourceARN, '/'), 1)",
                "Key": {
                  "id": {
                    "S.$": "$.[0].dynamodb.Keys.id.S"
                  }
                },
                "UpdateExpression": "SET #st = :newStatus",
                "ExpressionAttributeNames": {
                  "#st": "status"
                },
                "ExpressionAttributeValues": {
                  ":newStatus": {
                    "S": "REJECTED"
                  }
                }
              },
              "End": true
            }
          }
        }
      StateMachineName: ksatou2IntegrationStateMachine
      RoleArn:
        Fn::GetAtt:
          - StatesExecutionRole
          - Arn
  ApplyPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: ksatou2ApplyPipe
      RoleArn:
        Fn::GetAtt:
          - ApplyPipeRole
          - Arn
      Source:
        Fn::ImportValue:
          Fn::Sub: >-
            ${apiamplifyhandsonksatou2GraphQLAPIIdOutput}:GetAtt:ApplicationTable:StreamArn
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 1
        FilterCriteria:
          Filters:
            - Pattern: >-
                {"dynamodb":{"Keys":{"id":{"S":[{"exists":true}]}}},"eventName":[{"prefix":"INSERT"}]}
      Target:
        Fn::GetAtt:
          - IntegrationStateMachine
          - Arn
      TargetParameters:
        StepFunctionStateMachineParameters:
          InvocationType: FIRE_AND_FORGET
Description: >-
  {"createdOn":"Mac","createdBy":"Amplify","createdWith":"12.8.2","stackType":"custom-customCloudformation","metadata":{}}
